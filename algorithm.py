import random
import numpy
n=1000
k=10
iterProject=[]
projections=[]
projectionList=[]
actualProjectionList=[]
stdevs=[]
bearProjections=[]
bullProjections=[]
bullPrices=[]
bearPrices=[]
deviations=[]
for i in range(n):
  projections.append(0)
  actualProjectionList.append([])
  deviations.append([])
for j in range(k):
  prices=[209.59,210.88,210.65,213.8,207.97,206.11,205.96,206.72,206.64,208.26,209.17,208.43,207.53,205.79,203.49,204.25,206.43,207.39,209.81,210.29,209.33,211.78,213.96,212.79,212.96,213.47,214.56,216.24,215.92,215.97,217.4,219.76,222.45,219.76,222.22,224.62,224.34,223.79,224.04,226.77,226.92,225.42,224.38,224.34,225.13,225.57,226.58,231.69,232.54,233.19,236.55,234.67,235.78,235.6,236.54,233.34,235.33,234.72,237.3,238.97,238.9,235.14,235.71,232.47,228.69,228.63,233.52,233.75,236.44,235.97,237.28,237.73,242.22,243.03,242.38,244.74,242.42,241.75,242.02,242.29,243.08,240.51,235.52,235.16,234.79,237.73,237.24,236.08,237.13,237.85,237.58,236.41,237.54,234.43,232.76,233.2,236.11,235.45,240.12,241.35,244.75,246.63,247.98,247.35,245.04,245.51,243.94,245.65,245.67,239.96,239.58,241.13,241.49,245.73,246.13,244.35,244.99,244.06,247.58,245.26,247.03,248.93,248.74,249.6,250.84,252.04,252.7,251.79,244.05,241.59,242.82,243.01,242.22,238.11,233.66,235.01,236.07,236.36,236.24,238.18,238.67,237.95,240.22,236.01,234.55,236.59,236.12,234.91,235.99,237.03,236.84,237.04,236.88,240.68,243.34,245.67,246.25,247.15,247.38,246.51,249.77,249.67,250.19,247.81,252.84,253.3,252.84,252.93,248.52,250.08,253.83,250.47,248.14,247.67,247.06,235.18,230.67,231.94,231.72,231.68,232.31,232.21,234.93,235.67,236.28,231.83,232.23,229.91,231.32,233.6,233.92,233.71,234.78,234.41,236.68,235.85,235.48,235.91,235.37,238.8,239.53,238.84,235.97,235.88,236.26,239.28,238.26,238.77,239.26,240.94,243.71,243.98,245.8,246.2,246.58,245.87,245.77,246.13,247.08,246.64,243.02,244.5,243.21,236.78,237.66,242.05,245.86,247.45,248.17,248.77,249.22,249.05,254,253.85,253.04,251.17,251.16,249.28,250.96,248.17,247.35,248.21,250.04,247.56,246.78,249.73,248.75,246.34,246.75,246.92,244.67,243.37,242.17,246.45,252.19,252.78,255.33,257.28,258.73,260.3,259.95,262.64,265.49,266.28,269.34,269.04,267.84,273.91,270.1,269.61,273.75,275.4,274.24,274.08,276.45,275.99,279.64,281.16,280.04,278.16,275.07,277.54,275.62,279.7,285.49,285.42,285.57,285.48,282.38,282.88,284,282.96,284.2,283,284.12,288.62,290.52,290.66,288.3,290.86,290.31,291.22,289.89,288.23,292.47,292.78,294.08,298.17,301.16,301.64,300.38,300.93,296.13,289.2,291.7,292.39,293.63,300.41,301.95,296.69,297.26,292.86,292.49,285.62,279.16,284.44,286.91,286.09,293.07,287.19,286.82,281.52,281.83,282.51,284.57,288.36,288.03,289.36,295.34,295.47,294.71,293.37,291.57,293.3,293.98,294.24,287.43,286.65,279.62,278.21,280.17,282.16,289.11,288.73,290.76,290.1,289.83,288.46,293.47,295.09,293.45,296.72,297.28,297.47,298.73,301.62,303.14,304.76,304.81,305.69,306.97,309.65,308.43,306.86,308.96,307.16,307.9,304,302.94,305.63,304.92,307.4,308.29,307.52,308.37,307.63,310.68,310.42,312.7,314.59,311.39,308.55,308.47,307.81,309.27,310.65,312.33,315.65,318.05,318.66,317.57,316.23,318.45,322.09,323,328,333.33,332.39,334.65,333.99,334.11,329.25,329.83,334.84,335.9,333.33,336.77,334.57,331.38,327.04,329.8,323.4,321.68,320.21,316.7,313.56,313.92,317.13,321.98,323.08,317.74,314.86,314.93,314.86,310.54,319.5,321.19,319.72,320.16,323.2,321.69,321.83,327.33,328.07,328.08,319.22,318.52,314.16,311.07,309.39,314.52,305.23,298.08,282.7,224.84,236.83,258.38,248.25,248.22,227.67,233.19,233.28,244.77,251.79,255.75,250.82,248.96,254.48,250.41,243.17,239,241.9,248.52,245.64,246.76,243.04,245.55,240.05,242,242.99,246.39,244.1,240.34,230.3,232,233.45,225.21,223.92,228.76,234.91,238.89,233.57,235.32,242.19,242.8,248.08,242.98,249.16,249.54,249.95,253.16,252.02,245.57,244.59,247.86,247.08,255.94,258.63,258.89,261.07,243.4,247.49,245.42,245.81,245.88,252.05,251.88,249.32,242.63,243.14,246.5,252.17,249.57,249.38,253.29,257.07,255.04,255.57,252.21,252.21,250.96,249.1,251.72,256.66,255.95,257.63,259.83,259.21,257.91,261.61,265.64,265.02,264.43,261.58,262.46,267.82,267.22,267.98,267.88,267.3,267.38,269.43,269.06,263.84,264.94,266.37,266.13,268.65,271.22,271.12,268.74,268.84,268.91,263.35,258.51,258.06,260.07,258.07,258.89,256.09,258.51,265.49,266.16,269.43,270.16,271.37,271.57,259.75,259.77,259.21,257.92,256.13,256.42,260.14,262.46,263.93,263.8,262.61,261.33,261.56,263,260.32,258.79,257.48,256.54,257.62,253.31,253.85,256.78,258.71,255.39,251.35,252.57,253.02,250.83,253.51,253.76,254.63,253.42,262.16,266.69,265.33,266.45,267.05,265.17,271.52,270.2,271.26,271.43,274.3,274.45,269.77,270.68,268.94,271.67,275.66,274.82,273.78,269.06,272.31,270.98,273.5,271.78,275.81,272.02,271.78,270.02,270.55,267.85,269.32,270.26,272.05,270.51,268.47,270,266.66,263.5,264.68,265.19,262.5,266.02,272.02,272.21,272.06,272.98,271.93,271.15,269.98,266.49,261.9,262.75,262.55,258.69,260.56,260.77,261.03,260.24,256.98,257.09,261.13,259.18,259.68,262.33,262.51,261.52,258.35,264.48,265.59,265.87,265.88,266.84,266.47,267.43,269.31,268.13,270.65,268.82,269.73,270.16,269.18,269.76,268.88,268.26,269.08,272.59,271.91,271.38,270.62,271.86,272.39,278.07,278.24,277.93,273.98,275.22,275.5,276.41,279.38,276.97,282.88,283.66,282.28,282.38,281.38,277.28,278.53,278.97,279.06,279.06,279.2,276.31,273.93,275.15,273.33,273.69,267.92,267.72,268.34,263.82,264.6,266.47,266.22,267.21,269,267.23,268.64,270.91,273.7,272.49,271.81,274.93,277.59,278.13,276.57,277.03,276.52,276.31,275.31,274.28,276.29,278.91,277.47,277.38,276.87,277.87,276.83,277.08,279.4,277.72,275.31,279.43,280.01,280.67,280.98,280.38,282.01,283.17,283.87,284.14,283.55,286.53,286.9,286.63,284.5,288.49,289.14,291.69,293.82,294.99,297.47,297.09,296.84,296.97,296.04,299.63,298.65,296.06,292.02,292.54,291.81,294.24,294.81,296.76,295.98,290.91,292.05,287.13,287.82,288.86,287.11,289.95,291.18,294.81,293.87,294.08,293.93,292.88,295.32,295.14,296.67,299.44,292.69,289.92,291.33,290.49,288.98,290.57,291.59,292.35,292.52,294.87,296.39,295.31,296.24,295.29,297.15,297.11,298.49,298.99,296.4,301.36,301.72,306.02,307.15,306.19,309.61,308.69,306.75,306.93,309.58,309.64,309.12,308.12,308.16,307.77,307.61,306,305.19,305.8,306.95,313.84,316.16,315.28,317.48,317.97,321.24,321.98,318.32,319.14,319.17,321.59,317.99,320.52,321.97,325.52,322.03,324.24,326.95,326.75,326.69,326.24,323.91,323.83,320.08,321.35,321.89,321.25,320.48,322.32,328,326.6,328.44,325.81,319.68,317.98,319.23,320.64,321.55,324.91,327.02,328.78,329.81,329.95,331.84,332.44,331.35,335.73,333.51,335.9,333.67,333.88,338.05,341.99,342.15,346.08,343.75,344.34,344.74,343.92,349.41,349.35,346.94,348.25,344.74,343.06,344.71,345.66,344.45,346.03,340.67,341.19,344.7,351.52,350.52,352.09,349.84,350.65,351.45,353.73,352.56,349.24,348.35,348.76,347.66,348.7,345.46,343.16,345.06,346.73,346.55,346.47,345.7,347.05,344.23,344.33,345.1,348.6,349.15,350.87,354.71,356.94,356.97,358.78,359.8,359.13,356.99,355.39,333.65,342.85,341.16,341.76,347.13,347.16,344.83,343.7,342.5,337.93,335.06,335.07,340.36,341.2,338.48,337.62,332.61,334.81,338.15,336.57,339.1,339.55,337.99,340.54,340.58,341.61,339.35,339.59,341.91,343.97,345.61,345.77,343.6,345.99,350.63,351.41,349.58,348.55,347.59,348.69,348.56,351.73,352.75,350.93,350.14,343.69,342.46,342.84,344.78,347.42,346.81,348.81,350.67,353.4,359.69,358.76,355.66,352.2,353.79,349.62,347.31,348.53,339.93,337,340.75,337.4,338.19,339.15,330.38,331.61,330.26,326.08,325.8,325.2,322.98,329.08,328.79,330.92,331.85,329.66,333.75,332.96,333.62,330.08,331.02,332.01,334.89,332.72,327.99,327.67,325.7,324.15,328.67,330.26,331.89,332.74,335.54,333.74,337.93,336.95,340.27,337.93,338.67,336,336.87,338.07,341.91,343.53,341.57,339.74,335.69,337.22,337.63,341.5,342,340.79,339.94,338.7,343.64,341.09,340.73,340.08,341.37,342.07,341.92,344.34,344.74,344.68,340.72,338.09,335.12,331.05,330.36,332.03,332.92,329.11,330.8,332.25,334.48,335.57,338.39,340.53,342.01,342.86,343.82,352,354.75,354.28,354,354.47,354.64,358,358.43,359.29,358.41,354.58,360.65,360.86,361.23,363.16,367.4,366.64,364.96,363.15,358.71,361.63,366.25,364.9,362.9,362.91,356.88,358.47,359.1,360.47,355.43,352.31,352.06,355.14,357.63,358.02,359.54,360.16,355.68,358.42,359.52,356.49,361.23,365.44,367.31,368.95,367.52,364.22,365.32,361.61,355.31,355.79,357.09,355.91,353.44,355.55,356.15,355.52,351.48,344.86,334.43,334.83,338.35,339.94,335.52,338.84,339.39,340.06,332.39,327.83,328.51,321.86,316.55,307.06,311.51,321.44,321.34,324.19,318.71,322.56,323.09,324.39,320.46,323.4,321.63,321.04,322.54,318.65,316.83,317.77,318.6,316.6,311.48,311.32,304.59,308.26,305.06,300.97,306.05,314.94,315.21,311.4,312.69,311.5,313.48,305.1,300.39,295.46,300.03,303.23,298.92,298.76,305.74,312.48,314.76,312.36,312.6,310.17,304.71,301.88,304.06,304,307.02,311.85,314.59]
  wins=0
  losses=0
  for item in range(len(prices)-1):
    if prices[item+1]>prices[item]:
      wins+=1
    else:
      losses+=1
  iterProject=[]
  for i in range(n):
    winStreak=0
    loseStreak=0
    winProb=0
    loseProb=0
    prediction=prices[len(prices)-1]
    winAmount=[]
    lossAmount=[]
    for item in range(len(prices)-1):
      if prices[item+1]>prices[item]:
        if winStreak>0:
          winProb+=1.0/float(wins)
        winStreak+=1
        loseStreak=0
        winAmount.append(float(prices[item+1]/float(prices[item])))
      else:
        if loseStreak>0:
          loseProb+=1.0/float(losses)
        winStreak=0
        loseStreak+=1
        lossAmount.append(float(prices[item+1]/float(prices[item])))
    if winStreak>0:
      if random.uniform(0,1)<winProb:
        prediction*=random.gauss(float(sum(winAmount))/float(len(winAmount)),numpy.std(winAmount))
        wins+=1
      else:
        prediction*=random.gauss(float(sum(lossAmount))/float(len(lossAmount)),numpy.std(lossAmount))
        losses+=1
    else:
      if random.uniform(0,1)<loseProb:
        prediction*=random.gauss(float(sum(lossAmount))/float(len(lossAmount)),numpy.std(lossAmount))
        losses+=1
      else:
        prediction*=random.gauss(float(sum(winAmount))/float(len(winAmount)),numpy.std(winAmount))
        wins+=1
    prices.append(prediction)
    iterProject.append(prediction)
  projectionList.append(iterProject)
  for item in range(len(iterProject)):
    projections[item]+=float(iterProject[item])/float(k)
projections.pop(len(projections)-1)
for i in range(n-1):
  for j in range(k):
    actualProjectionList[i].append(projectionList[j][i])
    deviations[i].append(abs(1-float(projectionList[j][i])/float(projections[i])))
for i in range(n-1):
  stdevs.append(sum(deviations[i])/len(deviations[i]))
for i in range(len(projections)):
  bullProjections.append(projections[i]*((stdevs[i])+1))
  bearProjections.append(projections[i]*(1-(stdevs[i])))
print projections
for i in range(1000):
  print('--------')
print bullProjections
for i in range(1000):
  print('--------')
print bearProjections
